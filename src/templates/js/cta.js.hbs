{{#if (isLeader)}}/*
*	Check for left or right position in css to override centering of button
*/
function isCustomCtaPos(){
	if (hasObjProp(dc.CtaBtn_css)){
		for (var i in dc.CtaBtn_css) {
			var prop = dc.CtaBtn_css[i];
			if (prop.indexOf('left') > -1 || prop.indexOf('right') > -1){
				// cl("	NEW LEFT/RIGHT POSITION FOUND: NO AUTO CENTER");
				return true;
			}
		}
	}
	return false;
}

/*
* Find the longest line in #t2. 
* Accounts for single lines that wrap, multiple lines separated by <br>, and a combination of the two.
*/
function getLongestTextNodeWidth( parentNode ){
	// console.table(parentNode.childNodes);
	var txtLines = Array.from(parentNode.childNodes),// Convert nodelist to array to use Array.reduce method to compare values.
		longestWidth = 0;
		
	var longestLine = txtLines.reduce(function( previousNode, currentNode ){
		// Check to see if node is text. Maybe update this to a better check later.
		if(currentNode.length){

			// Draw a bounding box around text node
			var _rect,
				_range = document.createRange();

			_range.selectNode( currentNode );
			_rect = _range.getBoundingClientRect();
			_range.detach();

			longestWidth = _rect.width > longestWidth ? _rect.width : longestWidth;
			// id('t2').style.width = toCssNum(longestWidth);
			// cl('getLongestTextNodeWidth '+Math.round(longestWidth), 'pink');

			return Math.round(longestWidth);
		}
	}, []);
	// cl(`longestLine ${longestLine}`);
	return Math.round(longestLine);
}


/*
*	Centers CTA button between end of end txt and logo
*/
function centerCtaBtn(){
	if (isCustomCtaPos())return; // Nuke this if there's a left position entered in custom CSS
	var _rightX = gsap.getProperty('#t2-container', 'width'),
		_leftX = getLongestTextNodeWidth(id('t2')),
		_ctaSpace = _rightX - _leftX,
		_centerX = Math.floor(_leftX + _ctaSpace/2 ),
		_ctaW = cta.container.clientWidth,
		_ctaX = Math.floor(_centerX-(_ctaW/2));

	cta.container.style.left = toCssNum(_ctaX);
}
{{/if}}

function ctaBounceTl(){
	return gsap.timeline({paused:false, repeat: 1, repeatDelay: 0, yoyo: true})
		.to(cta.btn,{scale:1.15, duration:.3, ease:'back.in(1.7)', force3D:false, overwrite:false});		
}
/*
*	CTA Button interactions
*/
function onCtaOver(){
	return gsap.timeline({paused:false})
		.to(cta.btn,{scale:1.15, duration:.3, ease:'back.in(1.7)', force3D:false, overwrite:false});		
}
function onCtaOut(){
	return gsap.timeline({paused:false})
		.to(cta.btn,{scale:1.0, duration:.3, ease:'back.out(1.7)', force3D:false, overwrite:false});		
}

function initCtaAction(){
	// cl("initCtaAction ");
	clicker.addEventListener('mouseover', onCtaOver);
	clicker.addEventListener('mouseout', onCtaOut);
	cta.btn.addEventListener('click', clickOut, false); /* ADA Compliance */
}
