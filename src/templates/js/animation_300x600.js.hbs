function updateStripeClass(className) {
	// document.querySelectorAll('stripe').forEach(function(elem) {
	// 	elem.classList.add(className);
	// });
	// end.container.getElementsByClassName('stripe')[0].classList.add(className);
	id('nc-stripe').classList.add(className);
	id('end-stripe').classList.add(className);
}

function nGraphicIntroTl() {
	cl('	+ nGraphicIntroTl ');
	end.container.style.overflow = 'hidden';
	updateStripeClass('ng-stripe');

	return gsap.timeline({paused:false})
		.set(aniProps.container, {visibility:'visible'})
		.add(fadeInContainerTl())
		.from(svg.nGraphic, { scale:0, duration:0.5, ease:'back.out(1.5)'},'+=1')
		.set(aniProps.t1, {visibility:'visible'})
		.fromTo(aniProps.t1, {clipPath: getPath('wipeInFromLeftStart')}, {clipPath: getPath('wipeInEnd'), duration:1})
		// .fromTo(end.container, {clipPath:getPath('fromBottomLeftStart')}, {clipPath:getPath('fromBottomLeftEnd'), duration:1 })
		.add('f2out', '+='+dc.Txt1_Pause)
		.fromTo(aniProps.t1, {clipPath: getPath('wipeInEnd') }, {clipPath: getPath('wipeOutToLeft'), duration:1 }, 'f2out');
}

function nCropIntroTl() {
	cl('	+ nCropIntroTl ','red');
	var _maskScale2 = 3.51, // From PSD
		_maskX1 = -645, // Get number from PSD
		_maskY1 = -688, // Get number from PSD
		_picScale2 = 1.21,
		_zoomSpeed = 1;

	end.container.style.top = id('nc-t1-container').style.top = '275px';// Move copy up
	end.container.style.height = '325px'
	end.t2.style.paddingTop = '44px';
	aniOptions.NGraphic.t1.style.visibility = 'hidden';
	updateStripeClass('nc-stripe');

	return gsap.timeline({paused:false})
		.set('.mask-path', {fill:colorNameToHex(theme.bgColor)})
		.set('#svgStripePath', {fill:colorNameToHex(theme.swipeColor)})
		.set('.fake-mask', {scale:_maskScale2, x:_maskX1, y:_maskY1, transformOrigin:'0% 0%'})
		.set([aniProps.imgBack], {skewX:0.1})
		.set(aniProps.container, {visibility:'visible'})
		.add(fadeInContainerTl())
		.add('f2', '+=1')
		.to('#nc-pic-back', { scale: _picScale2, transformOrigin:'50% 50%', duration:_zoomSpeed, ease:'back.out(1.7)', force3D:true}, 'f2')
		.fromTo(aniProps.t1, {clipPath: getPath('wipeInFromLeftStart') }, {clipPath: getPath('wipeInEnd'), duration:1})
		.add('f2out', '+='+dc.Txt1_Pause)
		.fromTo(end.container, {clipPath:getPath('fromBottomLeftStart')}, {clipPath:getPath('fromBottomLeftEnd'), duration:1 }, 'f2out')
}

function txtOnlyIntroTl() {
	cl('	+ txtOnlyIntroTl ','red');
	updateStripeClass('to-stripe');

	// wipe in t1 > pause > reverse wipe out
	return _tl = gsap.timeline({paused:false})
		.set([aniProps.container,aniProps.t1], {visibility:'visible'})
		.add(fadeInContainerTl())
		.fromTo(aniProps.t1, {clipPath: getPath('wipeInFromLeftStart') }, {clipPath: getPath('wipeInEnd'), duration:1, repeat: 1, repeatDelay:dc.Txt1_Pause, yoyo: true })
}
{{!--
function clippedSwipeTl() {
	// cl('	//	 clippedSwipeTl ');
	var _swipeWidth = aniProps.swipePath.getBBox().width,
		_centerX = 160 - (_swipeWidth/2);

	return _tl = gsap.timeline({paused:false})
		.set(aniProps.swipe, {visibility: 'visible', top:-93})// Bump up to get to cover N Crop triangle wedge.
		.fromTo(aniProps.swipePath, {x:-_swipeWidth }, {x:_centerX, duration:swipeSpeed, ease:'power1.out'})// Get SVG shape & number from AI file.
		.to(aniProps.swipePath, {x:_swipeWidth, duration:swipeSpeed, ease:'power1.in'});
}--}}

function defaultSwipeTl() {
	// cl('	 defaultSwipeTl ');
	var _swipeWidth = aniProps.swipe.getBBox().width,
		_centerX = 160 - (_swipeWidth/2);

	return _tl = gsap.timeline({paused:false})
		.set(aniProps.swipe, {visibility: 'visible'})
		.fromTo(aniProps.swipePath, { x:-_swipeWidth }, { x:_centerX, duration:swipeSpeed, ease:'power1.out'})
		.to(aniProps.swipePath, { x:{{width}}, duration:swipeSpeed, ease:'power1.in'}){{!--
	// return _tl = gsap.timeline({paused:false})
	// 	.set('#end-swipe', {visibility: 'visible'})
	// 	.fromTo(end.swipe, { x:-(end.swipe.offsetWidth)}, {x:-(end.swipe.offsetWidth/3), duration:swipeSpeed, ease:'power1.out'})
	// 	.to(end.swipe, { x:{{width}}, duration:swipeSpeed, ease:'power1.in'})--}}
}

function animate() {
	cl(':: animate :: {{width}}x{{height}} ');
	cl('isLogoSlide? '+isLogoSlide, 'red');
	
	swipeSpeed = 1;

	var _introTl = aniProps.frame1Tl(), // Get intro TL to use
		_logoSlideTl = isLogoSlide ? gsap.timeline({paused:false}).from('#logo', { x:dc.LogoSlideX, duration:0.5}) : emptyTl(),
		_endSwipeTl = defaultSwipeTl();//aniProps.endSwipeTl();// Choose standard vs masked SVG swipe 

	tl
		.add(_introTl)
		.add('end', aniProps.overlap)
		.fromTo('#t2', {clipPath: getPath('wipeInFromLeftStart')}, {clipPath: getPath('wipeInEnd'), duration:1, ease:'power3.easein' }, 'end')
		.add(_logoSlideTl,'end')
		.set([cta.btn, cta.txt],{skewX:0.1}, 'end')
		.fromTo(cta.btn, {clipPath: getPath('wipeInFromLeftStart')}, {clipPath: getPath('wipeInEnd'), duration:1 },'-=0.5')
		.add(_endSwipeTl, '+=0.5')
		.add(ctaBounceTl(), "-="+swipeSpeed)
		.from(replay.container, { autoAlpha: 0 })
		.add(initReplayAction)
		.add('cta')
		.add(ctaBounceTl(), "+=1")
		.add(initCtaAction)
		// tl.pause("3");
		// .seek('end')
		// .seek(_introTl.labels[_introTl.previousLabel()]);
		;
	console.log('Animation Runtime is ' + tl.endTime());
}
